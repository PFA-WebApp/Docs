[["index.html", "1 Übersicht", " 1 Übersicht "],["introduction.html", "2 Einführung", " 2 Einführung Die Verwaltung von Messmitteln am Fachgebiet Fahrzeugantriebe der Technischen Universität Berlin gestaltet sich schwierig. Zurzeit werden Messmittel dezentral verwaltet. Die handelnden Personen besitzen wenig Information über den Ausleihzustand einzelner Messmittel über verschiedene Projekte hinweg. Daher hat sich das Fachgebiet entschlossen, im Rahmen des Moduls Projekt Fahrzeugantriebe eine Web-Applikation zur Verwaltung von Messmitteln zu erstellen. Diese Web-Applikation soll die Ausleihe und Rückgabe einzelner Messmittel über einen QR-Code realisieren. Darüber hinaus sollen Messmittel gruppiert, zusätzliche Informationen, wie zum Beispiel Datenblätter für Messmittel, bereitgestellt und der Bestand von Messmitteln erfasst werden. Um die unterschiedlichen Verantwortlichkeiten der Akteure zu berücksichtigen, ist zudem eine rechtebasierte Nutzerverwaltung vorzusehen. Der Inhalt dieses Berichtes umfasst die Dokumentation des Arbeitsprozesses, die Beschreibung des finalen Produktes hinsichtlich technischer Umsetzung und Funktionalität und zeigt zusätzlich Anknüpfungspunkte für Folgeprojekte auf. Messmittel = Sensor "],["requirements.html", "3 Anforderungen 3.1 Funktionale Anforderungen an die Web-Applikation 3.2 Nicht-funktionale Anforderungen an die Web-Applikation 3.3 Zusätzliche Anforderungen", " 3 Anforderungen Aus der vom Fachgebiet bereitgestellten Aufgabenstellung wurden unmittelbar die folgenden Anforderungen abgeleitet: Aufbauend auf einer Literaturrecherche soll ein Konzept zur Erstellung einer Web-Applikation entworfen werden. Die Umsetzung besteht aus der Programmierung der entworfenen Web-Applikation sowie dem Anlegen einer zugehörigen Datenbank auf dem Server des Fachgebiets. Die verwendeten Technologien sind dabei begründet frei zu wählen. Die konkreten Anforderungen an die Web-Applikation sind dabei aus dem in der Aufgabenstellung beschriebenen Funktionstest abgeleitet worden: Erstellen von Sensoren Erstellen von Nutzern Matching unterschiedlicher Sensortypen mit jeweils einem QR-Code Ausleihe und Rückgabe von Sensoren Konsistente Datenverwaltung in Form einer Datenbank Diese Anforderungen stellen den minimalen Satz an Anforderungen dar. Während der Bearbeitung des Projektes zeigte sich, dass zusätzliche Anforderungen notwendig sind, um einen zweckmäßigen Einsatz am Fachgebiet sicherzustellen. Die Web-Applikation soll beispielsweise sowohl von Studenten, wissenschaftlichen Mitarbeitern und speziell geschultem Personal (üblicherweise wissenschaftliche Mitarbeiter) mit unterschiedlichen Verantwortlichkeiten genutzt werden. Daher müssen die Minimalanforderungen erweitert werden. Nutzer besitzen unterschiedliche Rechte und müssen sich gegenüber der Web-Applikation authentifizieren. Der finale Satz an Anforderungen kann den folgenden Abschnitten zu funktionalen und nicht-funktionalen Anforderungen entnommen werden. 3.1 Funktionale Anforderungen an die Web-Applikation Funktionale Anforderungen spiegeln den Funktionsumfang der Web-Applikation wider. Die Vielzahl funktionaler Anforderungen bedingt ein Aufgliedern in verschiedene Funktionsbereiche, die im Folgenden detailliert beschrieben werden. 3.1.1 Sensorverwaltung Die Sensoren am Fachgebiet stehen untereinander in Beziehung: Ein Versuchsaufbau kann sich aus verschiedenen Sensoren zusammensetzen. Dabei ist weniger der Sensor als viel mehr seine Art von Interesse. So ist es zum Beispiel unerheblich von welchem Hersteller oder aus welcher Serie ein konkreter Sensor ist, solange die gleiche Funktionalität erbracht wird. Der konkrete Sensor wird als Untertyp bezeichnet. Die Funktionalität, die alle Untertypen verbindet, spiegelt sich im Typen wider. Ein Versuchsaufbau ist schließlich eine Gruppe, die verschiedene Typen beinhaltet. Zusammenfassend lässt sich festhalten: Jeder Sensor hat einen Untertypen. Mehrere nur geringfügig unterschiedliche Untertypen werden in einem Typen zusammengefasst. Mehrere Typen können Teil einer Gruppe sein. Ein Typ kann Teil mehrerer Gruppen sein. Ausgehend von diesen Definitionen sind die folgenden Anforderungen zu erfüllen: Erstellen und Entfernen von Gruppen, Typen und Untertypen Umbenennen von Gruppen, Typen und Untertypen Bestandserfassung auf Ebene der Untertypen Matching von QR-Codes auf Ebene der Typen Verknüpfung von Gruppen mit Typen und von Typen mit Untertypen 3.1.2 Dateiverwaltung Hochladen, Umbenennen und Löschen von Datenblättern im PDF-Format für Gruppen, Typen und Untertypen Herunterladen von einzelnen Datenblättern als PDF-Datei oder mehreren Datenblättern komprimiert in einer zip-Datei 3.1.3 Nutzerverwaltung Wie eingangs beschrieben, ist eine rechtebasierte Verwaltung notwendig. Dazu werden drei Rollen angelegt. Der Benutzer kann Sensoren ausleihen und zurückgeben. Er kann seinen Benutzernamen und sein Passwort ändern. Der Moderator kann zusätzlich Benutzer anlegen. Der Administrator kann zusätzlich auf die Sensorverwaltung zugreifen und Nutzer mit einer beliebigen Rolle anlegen. Eine genaue Aufschlüsselung der Rechte der drei Rollen - und somit der Anforderungen an die Nutzerverwaltung - kann Abbildung  entnommen werden. TODO: Rechte-Matrix 3.1.4 Ausleihverwaltung Ausleihe und Rückgabe von Untertypen beliebiger Menge innerhalb eines verfügbaren Rahmens durch Nutzer oder für beliebigen Nutzer durch Administrator Abschreiben von Untertypen durch Administratoren Anzeige von Datenblättern für Gruppen, Typen und Untertypen 3.1.5 Bestandsinformation Um ohne Betreten des Lagerortes ermitteln zu können, wie viele Elemente eines Typen oder Untertypen verfügbar sind oder festzustellen, welcher Nutzer einen benötigten Typen ausgeliehen hat, ist eine Übersicht über den Bestand und die Ausleihhistorie zu implementieren. 3.2 Nicht-funktionale Anforderungen an die Web-Applikation Für einen nachhaltigen Einsatz der Web-Applikation sind die folgenden nicht-funktionalen Anforderungen zu erfüllen: Intuitive Nutzerführung Konsistenz durch wiedererkennbares Layout und Design Performance Aufgrund ihres nicht-funktionalen Charakters ist die Erfüllung nicht an konkrete Bedingungen geknüpft. Alle unternommenen Bestrebungen zur Erfüllung der funktionalen Anforderungen sind stets hinsichtlich der hier aufgeführten nicht-funktionalen Anforderungen zu bewerten. 3.3 Zusätzliche Anforderungen Zusätzlich soll eine Datenbank für die konsistente Verwaltung der anzulegenden Daten genutzt werden. Die Web-Applikation und die Datenbank sollen auf einer virtuellen Maschine (VM), die auf einem Server des Fachgebiets abgelegt wird, betrieben werden. 3.3.1 Datenbank Die Datenbank soll die konsistente Datenverwaltung bewerkstelligen. Sie enthält Tabellen, welche entsprechend der funktionalen Anforderungen der Web-Applikation zu gestalten und miteinander zu verknüpfen sind. Hierzu müssen sowohl ein geeignetes Datenbankmodell als auch ein konkretes Datenbankmanagementsystem ausgewählt werden. 3.3.2 Deployment Als Deployment wird die Integration der Web-Applikation und der Datenbank in die bestehende Infrastruktur bezeichnet. Dazu sind folgende Schritte notwendig: Auswahl einer Virtualisierungssoftware Einrichten einer VM Installation von Servern, Wartungssoftware und Programmiersprache Transfer von Datenbank und Web-Applikation auf VM "],["tech-stack.html", "4 Tech Stack 4.1 Framework 4.2 Programmiersprache 4.3 Datenbank", " 4 Tech Stack Als Tech Stack wird die Summe der verwendeten Technologien bezeichnet. Dazu gehören zum Beispiel die Programmiersprache, das Framework für die Web-Applikation, die Datenbanksoftware, aber auch die Entwicklungsumgebung und weitere Software, die im Entwicklungsprozess verwendet wird. 4.1 Framework Zuallererst muss das Framework zur Erstellung der Web-Applikation gewählt werden. Dieses legt normalerweise die zu verwendende Programmiersprache fest und setzt möglicherweise Restriktionen in Bezug auf weitere Software. Eine Web-Applikation zeichnet sich dadurch aus, dass sie im Webbrowser ausführbar ist. Der Webbrowser ist in der Lage, Dateien im HTML-Format (HTML: Hyper Text Markup Language) darzustellen. Das HTML-Format spezifiziert dabei ausschließlich die Struktur der Webseite. Um die visuelle Erscheinung der Webseite zu beeinflussen, können Regeln in CSS-Dateien (CSS: Cascading Style Sheet) hinterlegt werden. Für interaktives Verhalten existiert die Sprache JavaScript, die es ermöglicht, das HTML-Dokument dynamisch anzupassen. Ein Framework zur Erstellung von Web-Applikationen bietet ein Grundgerüst für Layout sowie Funktionalität und stellt einen Server bereit. Für das Layout werden beispielsweise makroskopische Komponenten, wie Dashboards und Landing Pages, oder mikroskopische Komponenten, wie Inputs, Tabellen und Plots, bereitgestellt. Die Funktionalität wird abstrahiert und der Zustand der Web-Applikation modelliert. Der Server bearbeitet Anfragen von Clients, also Nutzern der Web-Applikation. Frameworks können in beliebigen Programmiersprachen implementiert werden, solange eine Schnittstelle zwischen der vom Framework verwendeten Sprache und einer dem Browser verständlichen Sprache existiert. Frameworks können hinsichtlich verschiedener Kriterien unterschieden werden. Backend-Frameworks integrieren neben einem Server meist auch noch Datenbanken, wohingegen Frontend-Frameworks ihren Fokus mehr auf dem visuellen Part legen. Multipage-Frameworks enthalten mehrere Seiten, wohingegen Singlepage-Frameworks nur eine einzige Seite darstellen. Für die Bearbeitung dieses Projektes wurde das Framework Shiny gewählt, das in der Programmiersprache R implementiert ist. Hierbei handelt es sich um ein Singlepage-Framework, das als Backend den sogenannten Shiny Server enthält. Maßgeblich für die Entscheidung war, dass die beiden Autoren über Erfahrung im Umgang mit R und im Speziellen mit Shiny verfügen. Darüber hinaus zeichnet sich Shiny durch folgende Eigenschaften und Vorzüge aus: Moderne Templates Fokus auf konkrete Funktionalität Reaktives Zustandsmodell Modularisierbarkeit Für Anwendungsfall ausreichende Performance Einfache Integration von Datenbanken 4.2 Programmiersprache R ist eine Multiparadigmen-Programmiersprache. Je nach Anwendungsfall kann somit zum Beispiel objektorientiert oder funktional programmiert werden. R verfügt einen Pool an Standardbibliotheken und kann einfach durch selbstgeschriebene und frei verfügbare Packages erweitert werden. Das Comprehensive R Archive Network (CRAN) stellt eine Vielzahl von quelloffenen Bibliotheken zur Verfügung beispielsweise {shiny}, das die Funktionalitäten des Frameworks beinhaltet. Die folgenden Tabellen geben Aufschluss über die im Projekt verwendeten Packages und ihren Zweck. Packages können von anderen Packages abhängen. Es wird daher darauf verzichtet auf untergeordnete Bibliotheken einzugehen. 4.2.1 Packages für {shiny} Package Beschreibung {bs4Dash} AdminLTE-Template {DT} DataTables für {shiny} {htmltools} HTML-Repräsentation in R {rclipboard} Zwischenablage {shinydisconnect} Verbindungsverlustbildschirm {shinyjs} Integration von Custom-JavaScript {waiter} Ladebildschirm 4.2.2 Packages für die Programmierung Package Beschreibung {Cairo} PDF-/PNG-/SVG-Erstellung {DBI} Datenbankinterface {dplyr} Datentransformationen {glue} String-Erzeugung {lubridate} Datumsformat {RSQLite} SQLite-Datenbank {stringr} String-Manipulation {tibble} Tabellenformat {purrr} Funktionale Programmierung {qrcode} Erstellung von QR-Codes {renv} Packagemanagement {yaml} YAML-Dateiformat 4.3 Datenbank Zur konsistenten Datenverwaltung wird eine Datenbank benötigt. Datenbanken sind in der Lage, Anfragen von verschiedenen Clients zu bearbeiten und dabei zu gewährleisten, dass bestimmte Regeln hinsichtlich der Datenstruktur und Ausprägung der Daten eingehalten werden. Es existieren verschiedene Datenbankmodelle, unter anderem das Netzwerk-, das objektorientierte, das hierachische oder das relationale Datenbankmodell.1 Diese unterscheiden sich hinsichtlich der Verknüpfung der beteiligten Daten. Aufgrund der hohen Flexibilität und der weiten Verbreitung wurde das relationale Datenbankmodell ausgewählt. Dieses speichert die Daten in miteinander verknüpften Tabellen. Die Tabellenzeilen enthalten Beobachtungen, die Tabellenspalten stellen die beobachtbaren Merkmale dar. Zur eindeutigen Identifikation erhält jede Zeile eine Identifikationsnummer. Die Spalte der Identifikationsnummern wird als Primärschlüssel (Primary Key) bezeichnet. Um verschiedene Tabellen miteinander zu verknüpfen, werden Identifikationsnummern referenziert. Eine Spalte, die auf einen Primärschlüssel einer anderen Tabelle verweist, wird als Fremdschlüssel (Foreign Key) bezeichnet. Es gibt eine Vielzahl verschiedener relationaler Datenbankmanagementsysteme, die sich hinsichtlich ihrer Anwendungsbereiche und Skalierbarkeit unterscheiden. Für Projekte kleinen und mittleren Umfanges (unter 100.000 Aufrufe / Tag2) eignet sich SQLite. Hierbei werden alle Tabellen in einer einzigen Datei mit dem Suffix .sqlite gespeichert. Der Zugriff auf die Datenbank erfolgt grundsätzlich über die Structured Query Language (SQL). Für die Programmiersprache R gibt es die Packages {DBI} und {RSQLite}, die eine direkte Schnittstelle zur Datenbank bereitstellen. Laudon, K.C.; Laudon, J.P.; Schroeder, D.: Wirtschaftsinformatik - Eine Einführung, Pearson, 2015, S. 295-300 SQLite Consortium: Appropriate Uses for SQLite, URL: https://www.sqlite.org/whentouse.html, Letzter Aufruf: 14.03.2021 "],["workflow.html", "5 Arbeitsprozess 5.1 Entwicklungsmodell 5.2 Entwicklungsumgebung 5.3 Versionskontrolle", " 5 Arbeitsprozess Neben der technischen Umsetzung ist insbesondere der Arbeitsprozess von herausragender Bedeutung. Durch diesen wird festgelegt, in welcher Weise die Anforderungen letztendlich umgesetzt werden. Für Projekte im Allgemeinen beinhaltet der Arbeitsprozess das Zeit-, Personal- und Aufgabenmanagement. Ein gut strukturierter Arbeitsprozess hilft schließlich dabei, Ergebnisse effizient und nachvollziehbar zu erzielen. In der Softwareentwicklung wird der Arbeitsprozess zusätzlich durch die Wahl von Entwicklungsmodell, Entwicklungsumgebung und Versionskontrolle bestimmt. 5.1 Entwicklungsmodell In der Softwareentwicklung existiert eine Vielzahl verschiedener Modelle zur Bewältigung eines Projektes. Die klassischen Modelle (Wasserfallmodell, V-Modell) fokussieren sich darauf, Phasen sequentiell abzuarbeiten. Im Kontrast dazu stehen die agilen Modelle, in denen alle Phasen wiederholt durchlaufen werden. Agile Modelle sind in der Regel deutlich flexibler, da die Anforderungen kontinuierlich angepasst werden können. Für kleine Entwicklungsteams bietet sich die Verwendung eines agilen Entwicklungsmodells auch deswegen an, weil der Koordinationsaufwand zwischen den Teilnehmern gering ist. Das Entwicklungsmodell legt nicht nur fest, wie das Projekt auf der Makroebene strukturiert ist, sondern auch wie auf der Mikroebene konkret programmiert wird. Wir haben uns dafür entschieden, das agile Modell des Pair Programming - einer Unterform des Extreme Programming - einzusetzen. Hierbei arbeiten stets zwei Programmierer (also im vorliegenden Fall alle) gemeinsam an der Erstellung von Programmcode. Vorteile hiervon liegen im stetigen Informationsaustausch, gemeinsamer Entscheidungsfindung und geringerer Fehlerhäufigkeit. Als nachteilig wird allgemeinhin der doppelte Personalaufwand angesehen. 5.2 Entwicklungsumgebung Als Entwicklungsumgebung wird die Software bezeichnet, die zur Erstellung und Verwaltung des Programmcodes genutzt wird. Für die Programmiersprache R empfiehlt es sich, die Entwicklungsumgebung RStudio zu verwenden. Diese ermöglicht es, Projekte anzulegen, die Web-App für das Testen unmittelbar auszuführen und den Code mit Git und GitHub für die Versionsverwaltung zu integrieren. Eine interaktive Konsole und eine integrierte Hilfe erleichtern den Arbeitsprozess. 5.3 Versionskontrolle Versionskontrolle ist aus vielerlei Gründen für den Softwareentwicklungsprozess unerlässlich. Sie ermöglicht es, Versionen zu verwalten, Bugs durch Differenzbildung zwischen verschiedenen Versionen zu finden und zu beheben sowie den Projektfortschritt zeitlich und inhaltlich nachzuvollziehen. Für die Versionskontrolle wurde Git in Verwendung mit GitHub eingesetzt. In Git werden inkrementelle Änderungen durch sogenannte Commits erfasst. Jeder Commit ist dabei mit einem Kommentar versehen. Durch sogenannte Branches können verschiedene Personen gleichzeitig zum Projekt beitragen oder verschiedene Features gleichzeitige entwickeln. Branches können wieder zusammengeführt werden (Merging). Ein Ordner, der mit Git initialisiert wurde, wird als Repository bezeichnet. Repositories können im Internet verfügbar gemacht werden und dann auf beliebigen Computern heruntergeladen werden. Die Online-Plattform GitHub erleichtert die Kollaboration über Git. Sie stellt einen Ablageort für das Repository bereit und unterstützt den Arbeitsprozess durch ein Ticket-System (Issues). In diesem können Fehler und Verbesserungsvorschläge gemeldet werden. Die Issues können darüber hinaus als Notizblock für geplante Features verwendet werden. "],["user-guide.html", "6 Nutzerhilfe 6.1 Sidebar 6.2 Navbar 6.3 Anmeldung 6.4 Ausleihen &amp; Zurückgeben 6.5 Bestandsinformation 6.6 Nutzerverwaltung A M 6.7 Gruppen A 6.8 Sensortypen A 6.9 Dateiverwaltung A 6.10 QR-Code A 6.11 Einstellungen", " 6 Nutzerhilfe Die folgenden Abschnitte fassen wesentliche Merkmale der Web-Applikation zusammen und erläutern ihre Bedienung. Die technischen Details können im anschließenden Kapitel nachgeschlagen werden. Die Web-Applikation ist ein Dashboard. Dieses besitzt eine Sidebar, eine Navbar und einen Body, vergleiche Abbildung 6.1. Abbildung 6.1: Übersicht über das Dashboard 6.1 Sidebar In der Sidebar kann über einen Reiter die Funktionalität ausgewählt werden, die im Body dargestellt wird. Die Anzahl an Auswahlmöglichkeiten hängt vom Anmeldestatus und der Benutzerrolle ab. 6.2 Navbar Die Navbar enthält: einen Link zum GitHub-Repository, das den Quellcode der Web-Applikation enthält, einen Reload-Button, mit dem eine Aktualisierung der Daten erzwungen werden kann, einen Toggle, mit dem zwischen Tag- und Nachtmodus gewechselt werden kann. 6.3 Anmeldung Dieser Reiter verändert sich in Abhängigkeit des Anmeldestatus. 6.3.1 Status: Nicht angemeldet Registrierte Benutzer können sich durch Angabe ihres Benutzernamens und ihres Passwortes anmelden, vergleiche Abbildung 6.2. Nicht-registrierte Benutzer müssen sich von einem Moderator oder Administrator (Wissenschaftliche Mitarbeiter) registrieren lassen. Abbildung 6.2: Anmeldung - nicht angemeldet 6.3.2 Status: Angemeldet Nach erfolgreicher Anmeldung wird der Benutzer mit Informationen über sein Nutzungsverhalten versorgt, vergleiche Abbildung 6.3. Dargestellt werden: der Benutzername und der Benutzerstatus, die Dauer seit der momentanen Anmeldung, die Dauer seit der letzten Anmeldung, die Anzahl der Anmeldungen. Benutzer können sich zudem abmelden. Abbildung 6.3: Anmeldung - angemeldet 6.4 Ausleihen &amp; Zurückgeben Die Ausleihe und Rückgabe setzt sich aus drei Abschnitten zusammen, vergleiche Abbildung 6.4. Im ersten Abschnitt Ausleihen &amp; Zurückgeben kann die konkrete Operation vorgenommen werden. Zusätzliche Informationen stellen die Abschnitte Gruppen des ausgewählten Typs und Dateien bereit. Abbildung 6.4: Übersicht: Ausleihen &amp; Zurückgeben 6.4.1 Ausleihen &amp; Zurückgeben Zunächst muss ein Typ ausgewählt werden. Wenn die Web-Applikation über einen QR-Code aufgerufen wurde (siehe QR-Code), ist der zum QR-Code gehörende Typ bereits ausgewählt. Im nächsten Schritt muss ein zugehöriger Untertyp ausgewählt werden. Die konkrete Operation kann durch Klicken auf einen der verfügbaren Buttons angestoßen werden. Im sich darauf öffnenden Dialog muss die Menge angegeben und die Ausführung der Operation bestätigt werden. Abbildung 6.5 gibt einen Überblick über den Abschnitt. A Administratoren können zusätzlich den ausführenden Nutzer auswählen, um Operationen für diesen durchzuführen. Das ist zum Beispiel notwendig, wenn ein Student das Fachgebiet verlassen hat und es versäumt hat, alle ausgeliehenen Sensoren zurückzugeben. Ausleihen Es können bis zur maximal verfügbaren Menge Elemente ausgeliehen werden. Zurückgeben Es können bis zur maximal ausgeliehenen Menge Elemente zurückgegeben werden. Abschreiben A Es können bis zur maximal im Lager verfügbaren Menge Elemente abgeschrieben werden. Dies ist zum Beispiel notwendig, wenn ein Element ausfällt oder verloren geht. Abbildung 6.5: Abschnitt: Ausleihen &amp; Zurückgeben 6.4.2 Gruppen des ausgewählten Typs Alle Gruppen des ausgewählten Typs werden aufgelistet. Durch Klicken auf eine Gruppe öffnet sich ein Dialog, in dem alle Typen dieser Gruppe angezeigt werden, vergleiche Abbildung 6.6. Durch Klicken auf einen Typen wird dieser Typ für eine weitere Operation ausgewählt. Somit können alle Elemente einer Gruppe (zum Beispiel ein Versuchsaufbau) komfortabel hintereinander ausgeliehen / zurückgegeben werden. Abbildung 6.6: Abschnitt: Gruppen des ausgewählten Typs 6.4.3 Dateien Hier werden alle dem ausgewählten Typ zugeordneten Dateien angezeigt. Dabei ist die Anzeige - wie Abbildung 6.7 entnommen werden kann - in drei Reiter gegliedert: Gruppen: Alle Dateien, die Informationen zu Gruppen des ausgewählten Typs enthalten Typ: Alle Dateien, die Informationen zum ausgewählten Typ enthalten Untertypen: Alle Dateien, die Informationen zu Untertypen des ausgewählten Typs enthalten. Es ist zu beachten, dass die Wahl des Untertypen keinen Einfluss auf die angezeigten Dateien hat, da Dateien für alle Untertypen dargestellt werden. Die Ziffer neben dem Reitertitel gibt Auskunft darüber, wie viele Dateien in der jeweiligen Kategorie vorhanden sind. Indem auf einen Dateinamen geklickt wird, öffnet sich das zugehörige PDF in einem separaten Browserfenster oder wird über den PDF-Viewer angezeigt. Alle Dateien einer Kategorie können in einem Archiv (.zip) heruntergeladen werden. Abbildung 6.7: Abschnitt: Dateien 6.5 Bestandsinformation Die Bestandsinformation gliedert sich in zwei Abschnitte, vergleiche Abbildung 6.8. In der Bestandsübersicht werden Informationen zum Lagerbestand von Sensoren dargestellt, wohingegen die Ausleihübersicht Informationen über ausgeliehene Sensoren enthält. Abbildung 6.8: Übersicht: Bestandsinformation 6.5.1 Bestandsübersicht Zunächst muss ein Typ ausgewählt werden. Für diesen Typen werden tabellarisch alle Untertypen dieses Typs aufgelistet. Die Spalte Verfügbar enthält die gelagerte Menge, wohingegen die Spalte Maximal verfügbar die maximal gelagerte Menge (kein Sensor dieses Untertypen ausgeliehen) enthält. Über die Checkbox Nur kritische Bestände anzeigen kann ausgewählt werden, ob nur Untertypen angezeigt werden sollen, für die die verfügbare Menge kleiner als ihr kritischer Bestand ist. Der kritische Bestand eines Untertypen kann von einem Administrator im Reiter Sensortypen festgelegt werden. 6.5.2 Ausleihübersicht Die Ausleihübersicht besteht aus vier Reitern, die unterschiedliche Fragestellen in Bezug auf ausgeliehene Sensoren beantworten, vergleiche Abbildung 6.9. Reiter Beschreibung Gesamt Übersicht über alle Untertypen mit einer gegenwärtig ausgeliehenen Menge größer Null. Nach Untertyp Übersicht über alle Nutzer, die den gewählten Untertypen zurzeit ausgeliehen haben. Hiermit kann herausgefunden werden, wer Ansprechpartner ist, falls alle Elemente eines Untertyps ausgeliehen sind. Nach Nutzer Übersicht über alle Untertypen, die der gewählte Nutzer zurzeit ausgeliehen hat. Transaktionen Übersicht über alle Transaktionen, die jemals im Rahmen der Sensorverwaltung stattgefunden haben. Ein Nutzer sieht ausschließlich seine eigenen Transaktionen. Ein Administrator sieht alle Transaktionen. Dazu gehören neben Ausleih- und Rückgabeoperationen auch Abschreibungen und sonstige Mengenänderungen. Abbildung 6.9: Übersicht: Ausleihübersicht 6.6 Nutzerverwaltung A M In der Nutzerverwaltung können neue Nutzer hinzugefügt und in der Nutzertabelle verwaltet werden, vergleiche Abbildung 6.10. Abbildung 6.10: Übersicht: Nutzerverwaltung 6.6.1 Nutzer hinzufügen Neue Nutzer können unter Angabe eines Benutzernamens und eines zur Sicherheit zweimal anzugebenden Passwortes hinzugefügt werden. Ein Moderator kann ausschließlich Benutzer hinzufügen, wohingegen ein Administrator Benutzer mit jeder Rolle hinzufügen kann. 6.6.2 Nutzertabelle In der Nutzertabelle können Nutzer verwaltet werden. Neben dem Benutzernamen und dem gegenwärtigen Status gibt es drei Spalten, die Buttons enthalten, mit denen Eigenschaften eines Nutzer angepasst werden können. Spalte Beschreibung Status ändern A Dieser Button öffnet einen Dialog, in dem ein neuer Status für den Nutzer ausgewählt werden kann. Entfernen Dieser Button öffnet einen Dialog, in dem bestätigt werden muss, dass der ausgewählte Nutzer gelöscht werden soll. Es ist zu beachten, dass diese Operation nicht rückgängig gemacht werden kann. Transaktionen, die der ausgewählte Nutzer vorgenommen hat, bleiben jedoch weiterhin erhalten. Es können nur Nutzer gelöscht werden, die zurzeit keine Sensoren ausgeliehen haben. Falls der Nutzer nicht in der Lage ist, die Sensoren eigenständig zurückzugeben, kann der Administrator die ausgeliehenen Sensoren im Reiter Ausleihen &amp; Zurückgeben für diesen Nutzer zurückgeben. Ein Moderator kann nur Benutzer entfernen, die er selbst hinzugefügt hat. Passwort zurücksetzen A Dieser Button öffnet einen Dialog, in dem bestätigt werden muss, dass das Passwort des Nutzers zurückgesetzt werden soll. Das Passwort wird auf das Standardpasswort 1234 zurückgesetzt und sollte vom Nutzer sofort danach im Reiter Einstellungen geändert werden. 6.7 Gruppen A Der Reiter Gruppen erlaubt es, neue Gruppen hinzuzufügen und bestehende Gruppen zu verwalten, vergleiche Abbildung 6.11. Abbildung 6.11: Übersicht: Nutzerverwaltung 6.7.1 Gruppe hinzufügen Eine neue Gruppe kann durch Angabe eines Gruppennamens hinzugefügt werden. 6.7.2 Gruppentabelle In der Gruppentabelle können Gruppen bearbeitet werden. Spalte Beschreibung Gruppenname Ein Klick auf einen Gruppennamen öffnet einen Dialog, in dem der Gruppenname angepasst werden kann. Typen bearbeiten Dieser Button öffnet einen Dialog, in dem die zur ausgewählten Gruppe zugehörigen Typen bearbeitet werden können. Entfernen Dieser Button öffnet einen Dialog, in dem bestätigt werden muss, dass die ausgewählte Gruppe gelöscht werden soll. Es ist zu beachten, dass diese Operation nicht rückgängig gemacht werden kann. 6.7.3 Typen anzeigen Zunächst muss eine Gruppe ausgewählt werden. In der Tabelle werden alle zur ausgewählten Gruppe zugehörigen Typen dargestellt. 6.8 Sensortypen A Der Reiter Sensortypen erlaubt es, neue Typen und Untertypen hinzuzufügen und bestehende Typen und Untertypen zu verwalten, vergleiche Abbildung 6.12. Abbildung 6.12: Übersicht: Sensortypen 6.8.1 Typ hinzufügen Ein neuer Typ kann durch Angabe eines Typnamens hinzugefügt werden. 6.8.2 Typtabelle In der Typtabelle können Typen bearbeitet werden. Spalte Beschreibung Typname Ein Klick auf einen Typnamen öffnet einen Dialog, in dem der Typname angepasst werden kann. Gruppen bearbeiten Dieser Button öffnet einen Dialog, in dem die zum ausgewählten Typ zugehörigen Gruppen bearbeitet werden können. Entfernen Dieser Button öffnet einen Dialog, in dem bestätigt werden muss, dass der ausgewählte Typ gelöscht werden soll. Es ist zu beachten, dass diese Operation nicht rückgängig gemacht werden kann. Ein Typ kann nur gelöscht werden, wenn kein Element seiner Untertypen ausgeliehen ist. Transaktionen, die den ausgewählten Typen betreffen, bleiben weiterhin erhalten. Das Entfernen eines Typen schließt das Entfernen aller Untertypen dieses Typen ein. 6.8.3 Gruppen anzeigen Zunächst muss ein Typ ausgewählt werden. In der Tabelle werden alle zum ausgewählten Typen zugehörigen Gruppen dargestellt. 6.8.4 Untertypen bearbeiten Zunächst muss ein Typ ausgewählt werden. In der Tabelle können Untertypen des ausgewählten Typen bearbeitet werden. Spalte Beschreibung Untertypname Ein Klick auf einen Untertypnamen öffnet einen Dialog, in dem der Untertypname angepasst werden kann. Menge Ein Klick auf die maximal verfügbare Menge öffnet einen Dialog, in dem die maximal verfügbare Menge des Untertypen angepasst werden kann. Es ist zu beachten, dass die maximal verfügbare Menge nicht auf einen Wert gesetzt werden kann, der kleiner der Anzahl gegenwärtig ausgeliehener Elemente ist. Kritischer Bestand Ein Klick auf den kritischen Bestand öffnet einen Dialog, in dem der kritische Bestand des Untertypen angepasst werden kann. Der kritische Bestand kann als Filterkriterium in der Ausleihübersicht des Reiters Bestandsinformation verwendet werden. Entfernen Dieser Button öffnet einen Dialog, in dem bestätigt werden muss, dass der ausgewählte Untertyp gelöscht werden soll. Es ist zu beachten, dass diese Operation nicht rückgängig gemacht werden kann. Ein Untertyp kann nur gelöscht werden, wenn keine Elemente von diesem ausgeliehen sind. Transaktionen, die den ausgewählten Untertypen betreffen, bleiben weiterhin erhalten. 6.9 Dateiverwaltung A In der Dateiverwaltung können PDF-Dateien als Informationsmaterial in den Reitern Gruppen, Typen und Untertypen hochgeladen werden. Die Reiter unterscheiden sich ausschließlich in der Auswahl des zu beschreibenden Objektes. Durch Klick auf Datei hochladen kann eine PDF-Datei auf dem lokalen Dateisystem ausgewählt werden. Hochgeladene Dateien werden in einer Tabelle angezeigt. Spalte Beschreibung Datei Ein Klick auf einen Dateinamen öffnet einen Dialog, in dem der Dateiname angepasst werden kann. Herunterladen Dieser Button lädt die Datei herunter. Löschen Dieser Button öffnet einen Dialog, in dem bestätigt werden muss, dass die ausgewählte Datei gelöscht werden soll. Es ist zu beachten, dass diese Operation nicht rückgängig gemacht werden kann. 6.10 QR-Code A Zur beschleunigten Ausleihe und Rückgabe kann ein QR-Code für Typen erstellt werden, vergleiche Abbildung 6.13. Dazu muss zunächst der Typ und die Serverdomäne ausgewählt werden. Der erstellte QR-Code und der Link, auf den der QR-Code verweist, werden eingeblendet. Der QR-Code kann im Anschluss als PDF-, PNG- oder SVG-Datei heruntergeladen werden. Dazu kann zusätzlich die Breite und Höhe der zu erstellenden Datei in Millimeter angegeben werden. Der ausgedruckte QR-Code kann im Lager platziert werden. Dort muss er zum Beispiel mit einem auf einem mobilen Endgerät installierten, handelsüblichen QR-Code-Reader eingescannt werden, wodurch die Web-Applikation geöffnet wird. Benutzer und Moderator werden - falls bereits angemeldet, siehe Cookies - sofort, ansonsten nachdem sie sich angemeldet haben, auf den Reiter Ausleihen &amp; Zurückgeben weitergeleitet, wo der eingescannte Typ bereits vorausgewählt ist. Sie müssen dann nur noch den Untertyp auswählen. Abbildung 6.13: Übersicht: QR-Code 6.11 Einstellungen In den Einstellungen können der Benutzername und das Passwort geändert werden, vergleiche Abbildung 6.14. Abbildung 6.14: Übersicht: Einstellungen 6.11.1 Benutzernamen ändern Um den eigenen Benutzernamen zu ändern, muss ein neuer Benutzername eingeben werden. Nach Eingabe des Passworts und Bestätigen wird der Benutzername geändert. 6.11.2 Passwort ändern Um das eigene Passwort zu ändern, muss ein neues Passwort zweimal eingegeben und bestätigt werden. "],["technical-guide.html", "7 Technische Umsetzung 7.1 Struktur der Web-Applikation 7.2 Datenbank 7.3 Cookies 7.4 Deployment", " 7 Technische Umsetzung Die nachfolgenden Abschnitte erweitern die Nutzerhilfe um die Beschreibung der technischen Umsetzung ausgewählter Elemente der Web-Applikation. Die ausgewählten Elemente sollen dabei insbesondere eine Vielzahl des verwendeteten Methodenspektrums darlegen, sodass eine nachhaltige Nutzung über die Laufzeit des Projektes hinaus erleichtert wird. Darüber hinaus sollen interessante Ansätze vorgestellt werden. 7.1 Struktur der Web-Applikation Strukturell handelt es sich bei der Web-Applikation um eine Sammlung verschiedener Dateien innerhalb eines Ordners. Der Einstiegspunkt in die Web-Applikation ist die Datei app.R. Alle anderen Dateien werden zur Laufzeit der Web-Applikation eingebunden. Die Web-Applikation wird gestartet, indem der Shiny Server die Datei app.R ausführt. In app.R werden Initialisierungen durchgeführt und die Funktionen ui und server definiert. Die Datei endet mit dem Aufruf shinyApp(ui, server), wobei die ui-Funktion das visuelle Layout der Web-Applikation beschreibt und die server-Funktion Eingaben verarbeitet. Mithilfe von sogenannten Modulen kann der Code strukturiert werden. Jedes Modul setzt sich dabei wiederum aus einer ui- und einer server-Funktion zusammen. Module bilden Teilaspekte, die unter Umständen wiederverwendet werden können, ab. 7.1.1 Struktur von app.R Wie bereits beschrieben, ist die Datei app.R der Einstiegspunkt der Web-Applikation. Da sie Einfluss auf das Verhalten vieler weiterer Module hat, ist ihr Aufbau näher zu betrachten. Zur Übersicht werden die Inhalte verkürzt dargestellt. Laden benötigter Packages mit library(). Die Mehrzahl aller Packages wird über den ::-Operator referenziert. Nur die Packages, die zwangsläufig mit library() geladen werden müssen, also Packages, die funktionsrelevanten Code mit dem Aufruf von library() verbinden, werden hier geladen. library(shiny) library(shinyjs) library(dplyr) library(qrcode) Die Funktion source_directory() wird manuell gesourcet und danach dazu verwendet, alle .R-Dateien in den Ordnern modules und db/func zu sourcen. source(&quot;init/source_directory.R&quot;) source_directory( path = &quot;modules&quot;, encoding = &quot;UTF-8&quot;, modifiedOnly = FALSE, chdir = TRUE, recursive = TRUE, envir = if (source_to_globalenv) globalenv() else environment() ) Die ui-Funktion bindet alle CSS- und JavaScript-Dateien ein und aktiviert spezielle Packages. Die Funktion container_ui(), die das Layout des Dashboardes festlegt, wird aufgerufen. # UI ----------------------------------------------------------------------- ui &lt;- htmltools::tagList( htmltools::includeScript(&quot;www/js/dark-mode.js&quot;), htmltools::includeCSS(&quot;www/css/styles.css&quot;) container_ui( id = &quot;container&quot; ), rclipboard::rclipboardSetup(), shinyjs::useShinyjs(), waiter::use_waiter() ) In der server-Funktion wird die .values-Environment angelegt. Diese enthält die folgenden Elemente: Name Beschreibung query$type Aus Query-String ausgelesene Typ-ID settings Liste, die Namenslängen festlegt und Dictionaries enthält update Liste, die reactiveVal()s enthält, die bei Datenaktualisierung getriggert werden user Liste, die Informationen zum angemeldeten Nutzer enthält yaml Inhalt von app.yml In der server-Funktion wird die server-Funktion container_server() aufgerufen. 7.1.2 Ordnerstruktur .gitignore Index aller Dateien, die nicht der Versionskontrolle unterliegen app.R Einstiegspunkt in die Web-Applikation app.yml Konfigurationsdatei db db.sqlite Datenbank func Funktionssammlung zur Interaktion mit der Datenbank files Dateiensammlung für Dateiverwaltung. Enthält drei Unterordner für Gruppen, Typen und Untertypen. Jeder dieser Unterordner enthält für jedes Element der jeweiligen Kategorie einen Ordner mit der Identifikationsnummer des jeweiligen Elementes als Namen init/source_directory.R Hilfsfunktion, die beim Start der Web-Applikation alle .R-Dateien einliest modules Shiny-Module und sonstige Funktionalität container.R Definition des Dashboards dt_options.R Optionen für DT::datatable object Generalisierte Module für Gruppen, Typen und Untertypen (z.B. Element hinzufügen, umbenennen etc.) sidebar_menu.R Definition der Sidebar tab_file_management Dateiverwaltung tab_group Gruppen tab_login Anmeldung tab_operate Ausleihen &amp; Zurückgeben tab_qrcode QR-Code tab_reporting Bestandsinformation tab_settings Einstellungen tab_type Typen tab_user_management Nutzerverwaltung utils.R Hilfsfunktionen renv, renv.lock Package-Management www css CSS-Dateien favicon.ico Sensotheka-Icon js JavaScript-Dateien 7.2 Datenbank 7.2.1 Struktur 7.2.2 Zugriff 7.3 Cookies 7.4 Deployment "],["discussion.html", "8 Diskussion", " 8 Diskussion "],["outlook.html", "9 Ausblick", " 9 Ausblick "],["references.html", "10 Referenzen", " 10 Referenzen "]]
